import { app, BrowserWindow, ipcMain } from "electron";
import fs from "fs";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    app.quit();
}

ipcMain.handle("read-directory", async (event, folderPath: string) => {
    const filenames: string[] = [];
    try {
        const files = fs.readdirSync(folderPath);
        for (const file of files) {
            filenames.push(file);
        }
    } catch (error) {
        console.error("Error reading directory:", error);
    }
    return filenames;
});

ipcMain.handle(
    "filter-and-copy-files",
    async (event, { originalPath, selectPath, resultPath }) => {
        const fs = require("fs");
        const path = require("path");

        const extractNumber = (filename: string) => {
            // Extracts the number from a filename, matching numbers after an underscore or at the start of the filename
            const match = filename.match(/(?:^|_)(\d+)(?=\.\w+$)/);
            return match ? match[1] : null;
        };

        // Read the directories and ignore non-file entries like .DS_Store and directories
        const originalFiles = fs
            .readdirSync(originalPath)
            .filter((file: any) =>
                fs.statSync(path.join(originalPath, file)).isFile()
            )
            .map((file: any) => path.join(originalPath, file));

        const selectedFiles = fs
            .readdirSync(selectPath)
            .filter((file: any) =>
                fs.statSync(path.join(selectPath, file)).isFile()
            )
            .map((file: any) => path.join(selectPath, file));

        // Get the numbers from selected files
        const selectedNumbers = selectedFiles.map((file: any) =>
            extractNumber(path.basename(file))
        );

        // Filter the original files
        const filtered = originalFiles.filter((file: any) => {
            const number = extractNumber(path.basename(file));
            return number && selectedNumbers.includes(number);
        });

        // Ensure the target directory exists and create it if not
        let counter = 0;
        while (fs.existsSync(resultPath)) {
            counter++;
            resultPath = path.join(originalPath, `selected_${counter}`);
        }
        fs.mkdirSync(resultPath, { recursive: true });

        // Copy the filtered files to the new directory
        filtered.forEach((file: any) => {
            const filename = path.basename(file);
            const targetFile = path.join(resultPath, filename);
            try {
                fs.copyFileSync(file, targetFile);
            } catch (error) {
                console.error(
                    `Failed to copy file ${file} to ${targetFile}:`,
                    error
                );
            }
        });

        return resultPath; // Return the path of the directory where files were copied
    }
);

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            contextIsolation: true, // Enable context isolation
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    if (process.env.NODE_ENV === "development") {
        mainWindow.webContents.openDevTools();
    }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});
